#ifndef __H_DECRYPTOR
#define __H_DECRYPTOR

#include <stdint.h>

#ifndef NULL
 #define NULL ((void*)0)
#endif

#ifndef __C_DECRYPTOR                 // for reference
 extern int decrypt_divafile(uint8_t *p_file, uint32_t size);
#else                                 // for implement
 #define ENDIAN_REORDER(dst, src) do { \
                   dst = (src << 8) & 0x00ff0000; \
                   dst = ((src << 24) & 0xff000000) | (dst & 0x00ffffff); \
                   dst = ((src >> 8) & 0x0000ff00) | (dst & 0xffff00ff); \
                   dst = ((src >> 24) & 0x000000ff) | (dst & 0xffffff00); \
                 } while (0);
 #define is_16_aligned(addr) (((addr + 0xf) & (~0xf)) == addr)
 // C function
 int decrypt_divafile(uint8_t *p_file, uint32_t size);
 int check_divafile(uint8_t* file, uint32_t size);
 int sub_5607DC(uint8_t *p_payload, uint32_t len_payload);
 // ASM function
 extern int sub_6BAD34(uint8_t *p1, uint8_t *p2);
 extern int sub_6BB5D0(uint8_t *p1, uint8_t *p2, uint32_t len, uint8_t *p3);  // dst, src, len, table?
 extern void sub_637434(uint8_t *p_file, uint8_t *p_payload, uint32_t len_payload);
 extern void sub_642238(uint8_t *p_data, uint32_t p2, uint32_t p3);
 
 uint8_t aFileAccessDeny[] =
 { 0x66, 0x69, 0x6C, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x64, 0x65, 0x6E, 0x79,  // approximately this size
   0x55, 0x53, 0x52, 0x44, 0x49, 0x52, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xD0, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x47, 0x6C, 0x6F, 0x62,
   0x61, 0x6C, 0x00, 0x00, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x00, 0x00, 0x00, 0x53, 0x79, 0x73, 0x74,
   0x65, 0x6D, 0x00, 0x00, 0x53, 0x54, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x72, 0x69,
   0x6E, 0x67, 0x00, 0x00, 0x53, 0x54, 0x4C, 0x47, 0x72, 0x61, 0x70, 0x68, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x53, 0x54, 0x4C, 0x53, 0x6B, 0x69, 0x6E, 0x00, 0x53, 0x54, 0x4C, 0x53,
   0x70, 0x72, 0x00, 0x00, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x00, 0x53, 0x68, 0x61, 0x64,
   0x65, 0x72, 0x00, 0x00, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x46, 0x69, 0x6C, 0x65, 0x52, 0x65, 0x61, 0x64, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x44, 0x65, 0x62, 0x75, 0x67, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x6B, 0xF0 };
#endif

#endif
